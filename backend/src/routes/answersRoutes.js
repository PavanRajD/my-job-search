const express = require("express");
const router = express.Router();
const pool = require("../db");

const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY || "";

// Save or update a user answer
router.post("/user-answers", async (req, res) => {
  const request = req.body;
  const sessionId = request.sessionId || "default_session";

  try {
    // Get question details
    const qResult = await pool.query("SELECT * FROM questions WHERE id = $1", [
      request.questionId,
    ]);
    const question = qResult.rows[0];
    if (!question) {
      return res.status(404).json({ error: "Question not found" });
    }

    // Check if answer already exists
    const aResult = await pool.query(
      "SELECT * FROM user_answers WHERE session_id = $1 AND question_id = $2",
      [sessionId, request.questionId]
    );
    let result;
    if (aResult.rows.length > 0) {
      // Update existing answer
      const updateResult = await pool.query(
        `UPDATE user_answers
         SET answer_text = $1, updated_at = NOW()
         WHERE id = $2
         RETURNING *`,
        [request.answerText, aResult.rows[0].id]
      );
      result = updateResult.rows[0];
    } else {
      // Insert new answer
      const insertResult = await pool.query(
        `INSERT INTO user_answers
          (session_id, question_id, question_text, answer_text, category, updated_at)
         VALUES ($1, $2, $3, $4, $5, NOW())
         RETURNING *`,
        [
          sessionId,
          request.questionId,
          question.text,
          request.answerText,
          question.category,
        ]
      );
      result = insertResult.rows[0];
    }

    res.json({
      status: "success",
      userAnswerId: result.id,
    });
  } catch (error) {
    console.error("Error saving user answer:", error);
    res.status(500).json({ error: error.message });
  }
});

// Fetch user answers
router.get("/user-answers", async (req, res) => {
  const sessionId = req.query.sessionId || "default_session";
  const category = req.query.category;

  try {
    let query = "SELECT * FROM user_answers WHERE session_id = $1";
    const params = [sessionId];
    if (category && category !== "All Categories") {
      params.push(category);
      query += ` AND category = $${params.length}`;
    }
    query += " ORDER BY updated_at DESC";

    const result = await pool.query(query, params);

    const answers = result.rows.map((answer) => ({
      id: answer.id,
      questionId: answer.question_id,
      questionText: answer.question_text,
      answerText: answer.answer_text,
      category: answer.category,
      updatedAt: new Date(answer.updated_at),
    }));

    res.json(answers);
  } catch (error) {
    console.error("Error fetching user answers:", error);
    res.status(500).json({ error: error.message });
  }
});

router.post("/generate-personalized-answer", async (req, res) => {
  const { question, answer, category, generateSuggestion, personalContext } =
    req.body;

  if (!GOOGLE_API_KEY) {
    return res.status(500).json({ error: "Google API key not configured" });
  }
  if (!question || !category || !generateSuggestion || !personalContext) {
    return res.status(400).json({ error: "Missing required fields" });
  }

  try {
    const prompt = `
You are an expert interview coach. Given the following behavioral interview question and a candidate's personal context (resume and experiences), generate a STAR-format answer that is highly relevant and personalized.

Question Category: ${category}
Question: ${question}

Personal Context:
${personalContext}

Format your answer as:
SITUATION: ...
TASK: ...
ACTION: ...
RESULT: ...

Do not include any extra commentary or explanation.
`;

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent?key=${GOOGLE_API_KEY}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [
            {
              parts: [{ text: prompt }],
            },
          ],
        }),
      }
    );

    if (!response.ok) {
      throw new Error(`Google Gemini API error: ${response.status}`);
    }

    const data = await response.json();
    const suggestedAnswer =
      data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

    if (!suggestedAnswer) {
      return res
        .status(500)
        .json({ error: "No answer generated by Gemini API" });
    }

    res.json({ suggestedAnswer });
  } catch (error) {
    console.error("Error generating suggested answer:", error);
    res.status(500).json({ error: error.message });
  }
});

router.post("/analyze-answer", async (req, res) => {
  const { question, answer, category } = req.body;

  if (!GOOGLE_API_KEY) {
    return res.status(500).json({ error: "Google API key not configured" });
  }
  if (!question || !answer || !category) {
    return res.status(400).json({ error: "Missing required fields" });
  }

  try {
    const prompt = `
You are an expert interview coach. Analyze the following behavioral interview answer using the STAR method. Provide feedback in these categories: Structure, Clarity, Tone, Impact. For each, give a score (0-100) and a short note. Also provide an overall assessment and a suggested improved example answer.

IMPORTANT:
Respond ONLY with raw JSON â€” no extra formatting, no markdown, no text before or after.
{
  "structure": { "score": number, "notes": string },
  "clarity": { "score": number, "notes": string },
  "tone": { "score": number, "notes": string },
  "impact": { "score": number, "notes": string },
  "overall": string,
  "improvedExample": string
}

Question Category: ${category}
Question: ${question}
Candidate Answer: ${answer}
`;

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent?key=${GOOGLE_API_KEY}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [
            {
              parts: [{ text: prompt }],
            },
          ],
        }),
      }
    );

    if (!response.ok) {
      throw new Error(`Google Gemini API error: ${response.status}`);
    }

    const data = await response.json();
    const text = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

    // Try to extract JSON from the response
    let feedback = null;
    try {
      const clean = text.replace(/```json\s*|```\s*/g, "").trim();

      const unescaped = clean
        .replace(/\\"/g, '"')
        .replace(/\\n/g, "\n")
        .replace(/\\r/g, "\r");
      feedback = JSON.parse(unescaped);
    } catch (err) {
      const match = text.match(/```json\s*([\s\S]*?)\s*```/);
      if (match && match[1]) {
        return JSON.parse(match[1].trim());
      }

      return res
        .status(500)
        .json({ error: "Failed to parse feedback from Gemini", raw: text });
    }

    // Optionally: validate feedback structure here

    res.json(feedback);
  } catch (error) {
    console.error("Error analyzing answer:", error);
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
